<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Futuristic E-Commerce Store - Signup</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

    <style>
        body {
            background: linear-gradient(rgba(40, 63, 74, 0.8), rgba(32, 58, 67, 0.9));
            color: #ffffff; /* White text on top of the background */
            font-family: 'Roboto', sans-serif;
        }

        .container {
            background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent dark background */
            border-radius: 10px; /* Rounded corners */
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.2); /* Subtle box shadow */
            padding: 30px;
            margin-top: 50px;
        }

        h2 {
            color: #ffffff; /* White text color */
            font-size: 2.5em;
        }

        .card {
            margin-bottom: 20px;
            border: none;
            box-shadow: 0 4px 8px rgba(255, 255, 255, 0.2);
            background: rgba(0, 0, 0, 0.9); /* Semi-transparent dark background for cards */
        }

        .card-title {
            color: #007bff; /* Primary color for card titles */
        }

        .btn-primary {
            background-color: #007bff; /* Primary color for buttons */
            border: none;
            transition: background-color 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }

        .btn-success {
            background-color: #28a745; /* Success color for buttons */
            border: none;
            transition: background-color 0.3s ease;
        }

        .btn-success:hover {
            background-color: #218838; /* Darker shade on hover */
        }

        /* Custom styles for icons */
        .icon {
            margin-right: 10px;
        }
    </style>
</head>
<body>

  <div class="container">
    <div class="row justify-content-center">
      <div class="col-md-6">
        <h2 class="mb-4"> Create an Account </h2>
        
        <!-- Signup Form -->
        <div class="card mb-4">
          <div class="card-body">
            <h5 class="card-title">Signup</h5>
            <!-- Add your signup form fields and logic here -->
            <form id="signupForm">
              <div class="form-group">
                <label for="email">Email</label>
                <div class="input-group">
                  <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-envelope icon"></i></span>
                  </div>
                  <input type="email" class="form-control" id="email" name="email" placeholder="Enter your email" required>
                </div>
              </div>
              <div class="form-group">
                <label for="password">Password</label>
                <div class="input-group">
                  <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-lock icon"></i></span>
                  </div>
                  <input type="password" class="form-control" id="password" name="password" placeholder="Enter your password" required>
                </div>
              </div>
              <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <div class="input-group">
                  <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-lock icon"></i></span>
                  </div>
                  <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="Confirm your password" required>
                </div>
              </div>
              <div class="form-group">
                <label for="username">Username</label>
                <div class="input-group">
                  <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-user icon"></i></span>
                  </div>
                  <input type="text" class="form-control" id="username" name="username" placeholder="Enter your username" required>
                </div>
              </div>
              <div class="form-group">
                <label for="address">Address</label>
                <div class="input-group">
                  <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fas fa-map-marker-alt icon"></i></span>
                  </div>
                  <input type="text" class="form-control" id="address" name="address" placeholder="Enter your address" required>
                </div>
              </div>
              <div class="form-group">
                <label for="roleId">Role</label>
                <select class="form-control" id="roleId" name="roleId">
                    <!-- Options will be dynamically populated here -->
                </select>
            </div>
            <div class="form-group">
                <label for="roleLabel">Selected Role:</label>
                <span id="roleLabel"></span>
            </div>
            <button type="button" onclick="submitForm()" class="btn btn-success">Signup</button>
            
            </form>
          </div>
        </div>

      </div>
    </div>
  </div>

  <!-- Bootstrap JS (for some components) -->
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

  <script>
    // Function to fetch roles and populate dropdown on page load
    document.addEventListener("DOMContentLoaded", function () {
      fetchRolesAndPopulateDropdown();
      const dropdown = document.getElementById('roleId');
      dropdown.addEventListener('change', updateRoleLabel);
    });

    async function fetchRolesAndPopulateDropdown() {
      try {
        // Fetch roles and populate dropdown
        const response = await fetch('https://localhost:7114/GetAllRoles', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

        const data = await response.json();

        console.log('Roles response:', data); // Log the response

        // Check if 'result' property is an array
        if (Array.isArray(data.result)) {
          // Populate the dropdown options
          populateRolesDropdown(data.result);
        } else {
          console.error('Invalid response format - result is not an array');
        }
      } catch (error) {
        console.error('There was a problem fetching roles:', error);
      }
    }

    // Function to populate roles dropdown options
   // Function to populate roles dropdown options
function populateRolesDropdown(roles) {
  var dropdown = document.getElementById('roleId');

  // Clear existing options
  dropdown.innerHTML = '';

  // Populate options from roles array
  roles.forEach(role => {
    var option = document.createElement('option');
    option.value =   role.roleId; // Assuming role_Name is the property of the role object
    option.text = role.role_Name; // Assuming role_Description is the property of the role object
    dropdown.add(option);
  });

  // Populate role label on page load
  updateRoleLabel();
}


    // Function to update role label
    function updateRoleLabel() {
      var dropdown = document.getElementById('roleId');
      var roleLabel = document.getElementById('roleLabel');

      if (dropdown.selectedIndex !== -1) {
        // If an option is selected, update the role label
        roleLabel.textContent = dropdown.options[dropdown.selectedIndex].text;
      }
    }

    // Function to be called when the signup button is clicked
    async function submitForm() {
    try {
        // Retrieve form values
        const email = document.getElementById('email').value;
        const password = document.getElementById('password').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        const username = document.getElementById('username').value;
        const address = document.getElementById('address').value;
        const roleId = document.getElementById('roleId').value;

        // Validate form fields (add your validation logic)

        // Prepare data for submission
        const formData = {
            email: email,
            password: password,
            confirmPassword: confirmPassword,
            username: username,
            address: address,
            roleId: roleId
        };

        
        const response = await fetch('https://localhost:7114/AddUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            throw new Error('Network response was not ok');
        }

        

        // Handle the response from the server
        // Handle the response from the server
if (response.status === 200) {
    const data = await response.json(); // Parse the JSON response
    // Show the verification token to the user
    alert('Verification Token: ' + data.result);
} else {
    // Handle other responses, such as errors
    console.error('Registration failed:', response.statusText);
    // Display an error message to the user
    alert('Registration failed: ' + response.statusText);
}

    } catch (error) {
        console.error('There was a problem with the registration:', error);
        // Display an error message to the user
        alert('There was a problem with the registration: ' + error.message);
    }
}

</script>

</body>
</html>
