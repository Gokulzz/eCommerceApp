[08:21:24InformationRequest starting HTTP/2 POST https://localhost:32778/UserLogin application/json 71] { Protocol: "HTTP/2", Method: "POST", ContentType: "application/json", ContentLength: 71, Scheme: "https", Host: "localhost:32778", PathBase: "", Path: "/UserLogin", QueryString: "", EventId: { Id: 1 }, SourceContext: "Microsoft.AspNetCore.Hosting.Diagnostics", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
[08:21:25InformationCORS policy execution successful.] { EventId: { Id: 4, Name: "PolicySuccess" }, SourceContext: "Microsoft.AspNetCore.Cors.Infrastructure.CorsService", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
[08:21:25InformationExecuting endpoint '"E_Commerce.PL.Controllers.LoginController.UserLogin (E-Commerce.PL)"'] { EventId: { Name: "ExecutingEndpoint" }, SourceContext: "Microsoft.AspNetCore.Routing.EndpointMiddleware", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
[08:21:25InformationRoute matched with "{action = \"UserLogin\", controller = \"Login\"}". Executing controller action with signature "System.Threading.Tasks.Task`1[eCommerceApp.BLL.ApiResponse] UserLogin(eCommerceApp.BLL.DTO.UserLoginDTO)" on controller "E_Commerce.PL.Controllers.LoginController" ("E-Commerce.PL").] { EventId: { Id: 3, Name: "ControllerActionExecuting" }, SourceContext: "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", ActionId: "33a7b49f-99dc-41b8-a00e-3a5b0671e0a0", ActionName: "E_Commerce.PL.Controllers.LoginController.UserLogin (E-Commerce.PL)", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
[08:21:28ErrorAn error occurred using the connection to database '"E-CommerceApp"' on server '"10.0.0.174,1433"'.] { EventId: { Id: 20004, Name: "Microsoft.EntityFrameworkCore.Database.Connection.ConnectionError" }, SourceContext: "Microsoft.EntityFrameworkCore.Database.Connection", ActionId: "33a7b49f-99dc-41b8-a00e-3a5b0671e0a0", ActionName: "E_Commerce.PL.Controllers.LoginController.UserLogin (E-Commerce.PL)", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
[08:21:28ErrorAn exception occurred while iterating over the results of a query for context type '"eCommerceApp.DAL.Data.DataContext"'."
""Microsoft.Data.SqlClient.SqlException (0x80131904): Cannot authenticate using Kerberos. Ensure Kerberos has been initialized on the client with 'kinit' and a Service Principal Name has been registered for the SQL Server to allow Kerberos authentication.
ErrorCode=InternalError, Exception=Interop+NetSecurityNative+GssApiException: GSSAPI operation failed with error - Unspecified GSS failure.  Minor code may provide more information (SPNEGO cannot find mechanisms to negotiate).
   at System.Net.Security.NegotiateStreamPal.GssInitSecurityContext(SafeGssContextHandle& context, SafeGssCredHandle credential, Boolean isNtlm, SafeGssNameHandle targetName, GssFlags inFlags, Byte[] buffer, Byte[]& outputBuffer, UInt32& outFlags, Int32& isNtlmUsed)
   at System.Net.Security.NegotiateStreamPal.EstablishSecurityContext(SafeFreeNegoCredentials credential, SafeDeleteContext& context, String targetName, ContextFlagsPal inFlags, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlagsPal& outFlags)
   at Microsoft.Data.SqlClient.SNI.SNIProxy.GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]& sendBuff, Byte[][] serverName)
   at Microsoft.Data.SqlClient.SNI.TdsParserStateObjectManaged.GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[][] _sniSpnBuffer)
   at Microsoft.Data.SqlClient.TdsParser.SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength)
   at Microsoft.Data.SqlClient.TdsParser.TdsLogin(SqlLogin rec, FeatureExtension requestedFeatures, SessionData recoverySessionData, FederatedAuthenticationFeatureExtensionData fedAuthFeatureExtensionData, SqlConnectionEncryptOption encrypt)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean ignoreSniOpenTimeout, TimeoutTimer timeout, Boolean withFailover)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken, DbConnectionPool pool)
   at Microsoft.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   at Microsoft.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.WaitForPendingOpen()
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:ca88c04a-6728-4aaf-b9e4-2c5be5463647"] { EventId: { Id: 10100, Name: "Microsoft.EntityFrameworkCore.Query.QueryIterationFailed" }, SourceContext: "Microsoft.EntityFrameworkCore.Query", ActionId: "33a7b49f-99dc-41b8-a00e-3a5b0671e0a0", ActionName: "E_Commerce.PL.Controllers.LoginController.UserLogin (E-Commerce.PL)", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" } Microsoft.Data.SqlClient.SqlException (0x80131904): Cannot authenticate using Kerberos. Ensure Kerberos has been initialized on the client with 'kinit' and a Service Principal Name has been registered for the SQL Server to allow Kerberos authentication.
ErrorCode=InternalError, Exception=Interop+NetSecurityNative+GssApiException: GSSAPI operation failed with error - Unspecified GSS failure.  Minor code may provide more information (SPNEGO cannot find mechanisms to negotiate).
   at System.Net.Security.NegotiateStreamPal.GssInitSecurityContext(SafeGssContextHandle& context, SafeGssCredHandle credential, Boolean isNtlm, SafeGssNameHandle targetName, GssFlags inFlags, Byte[] buffer, Byte[]& outputBuffer, UInt32& outFlags, Int32& isNtlmUsed)
   at System.Net.Security.NegotiateStreamPal.EstablishSecurityContext(SafeFreeNegoCredentials credential, SafeDeleteContext& context, String targetName, ContextFlagsPal inFlags, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlagsPal& outFlags)
   at Microsoft.Data.SqlClient.SNI.SNIProxy.GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]& sendBuff, Byte[][] serverName)
   at Microsoft.Data.SqlClient.SNI.TdsParserStateObjectManaged.GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[][] _sniSpnBuffer)
   at Microsoft.Data.SqlClient.TdsParser.SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength)
   at Microsoft.Data.SqlClient.TdsParser.TdsLogin(SqlLogin rec, FeatureExtension requestedFeatures, SessionData recoverySessionData, FederatedAuthenticationFeatureExtensionData fedAuthFeatureExtensionData, SqlConnectionEncryptOption encrypt)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean ignoreSniOpenTimeout, TimeoutTimer timeout, Boolean withFailover)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken, DbConnectionPool pool)
   at Microsoft.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   at Microsoft.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.WaitForPendingOpen()
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:ca88c04a-6728-4aaf-b9e4-2c5be5463647
 
[08:21:28InformationExecuted action "E_Commerce.PL.Controllers.LoginController.UserLogin (E-Commerce.PL)" in 2877.945ms] { EventId: { Id: 2, Name: "ActionExecuted" }, SourceContext: "Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
[08:21:28InformationExecuted endpoint '"E_Commerce.PL.Controllers.LoginController.UserLogin (E-Commerce.PL)"'] { EventId: { Id: 1, Name: "ExecutedEndpoint" }, SourceContext: "Microsoft.AspNetCore.Routing.EndpointMiddleware", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
[08:21:28Error{"Message":"Cannot authenticate using Kerberos. Ensure Kerberos has been initialized on the client with \u0027kinit\u0027 and a Service Principal Name has been registered for the SQL Server to allow Kerberos authentication.\nErrorCode=InternalError, Exception=Interop\u002BNetSecurityNative\u002BGssApiException: GSSAPI operation failed with error - Unspecified GSS failure.  Minor code may provide more information (SPNEGO cannot find mechanisms to negotiate).\n   at System.Net.Security.NegotiateStreamPal.GssInitSecurityContext(SafeGssContextHandle\u0026 context, SafeGssCredHandle credential, Boolean isNtlm, SafeGssNameHandle targetName, GssFlags inFlags, Byte[] buffer, Byte[]\u0026 outputBuffer, UInt32\u0026 outFlags, Int32\u0026 isNtlmUsed)\n   at System.Net.Security.NegotiateStreamPal.EstablishSecurityContext(SafeFreeNegoCredentials credential, SafeDeleteContext\u0026 context, String targetName, ContextFlagsPal inFlags, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlagsPal\u0026 outFlags)\n   at Microsoft.Data.SqlClient.SNI.SNIProxy.GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]\u0026 sendBuff, Byte[][] serverName)\n   at Microsoft.Data.SqlClient.SNI.TdsParserStateObjectManaged.GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]\u0026 sendBuff, UInt32\u0026 sendLength, Byte[][] _sniSpnBuffer)\n   at Microsoft.Data.SqlClient.TdsParser.SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]\u0026 sendBuff, UInt32\u0026 sendLength)","StatusCode":500}] { SourceContext: "eCommerceApp.DAL.Models.User", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
[08:21:28InformationRequest finished HTTP/2 POST https://localhost:32778/UserLogin application/json 71 - 500 - application/json 3422.9416ms] { ElapsedMilliseconds: 3422.9416, StatusCode: 500, ContentType: "application/json", ContentLength: null, Protocol: "HTTP/2", Method: "POST", Scheme: "https", Host: "localhost:32778", PathBase: "", Path: "/UserLogin", QueryString: "", EventId: { Id: 2 }, SourceContext: "Microsoft.AspNetCore.Hosting.Diagnostics", RequestId: "0HN365PC5O2UH:0000000F", RequestPath: "/UserLogin", ConnectionId: "0HN365PC5O2UH", MachineName: "8405e26ab353", ProcessId: 24, ThreadId: 22, ThreadName: ".NET ThreadPool Worker" }  
